#file: noinspection UndefinedAction,UndefinedParamsPresent

name: Publish All Libraries

on:
  push:
    branches:
      - main

jobs:
  check-and-publish:
    name: Check for Tags and Publish
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write # needed for provenance data generation
    timeout-minutes: 15
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          filter: tree:0
          token: ${{ secrets.PAT }}

      - name: Install Node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          registry-url: https://registry.npmjs.org/

      - name: Install dependencies
        run: npm install
        shell: bash

      - name: Print Environment Info
        run: npx nx report
        shell: bash

      - name: Build packages
        run: npx nx run-many -t build --projects="libs/*"
        shell: bash

      - name: Detect and publish new tags
        shell: bash
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_ACCESS_TOKEN }}
          NPM_CONFIG_PROVENANCE: true
        run: |
          # Get all tags that match our release pattern
          git fetch --tags
          ALL_TAGS=$(git tag -l "release/*/*.*.*")

          # Define our libraries
          LIBS=("utils" "nest-connector" "nest-auth" "nest-crud" "ngx-utils" "nest-core")

          # Create a file to track processed tags
          PROCESSED_TAGS_FILE=".processed_tags"
          if [ ! -f "$PROCESSED_TAGS_FILE" ]; then
            touch "$PROCESSED_TAGS_FILE"
          fi

          # For each library, check for new tags
          for lib in "${LIBS[@]}"; do
            echo "Checking for new $lib tags..."
            # Get the latest tag for this library
            LATEST_TAG=$(echo "$ALL_TAGS" | grep "release/$lib/" | sort -V | tail -n 1)

            if [ -n "$LATEST_TAG" ]; then
              # Check if this tag has been processed already
              if ! grep -q "$LATEST_TAG" "$PROCESSED_TAGS_FILE"; then
                echo "Found new tag: $LATEST_TAG"

                # Publish the package
                echo "Publishing $lib..."
                npx nx release publish --projects=$lib

                # Mark this tag as processed
                echo "$LATEST_TAG" >> "$PROCESSED_TAGS_FILE"
                echo "$lib published successfully!"
              else
                echo "Tag $LATEST_TAG already processed. Skipping."
              fi
            else
              echo "No tags found for $lib"
            fi
          done

          # Commit the processed tags file if there are changes
          if git diff --quiet "$PROCESSED_TAGS_FILE"; then
            echo "No new tags were processed"
          else
            git config --local user.email "github-actions@github.com"
            git config --local user.name "GitHub Actions"
            git add "$PROCESSED_TAGS_FILE"
            git commit -m "Update processed tags [skip ci]"
            git push
          fi
